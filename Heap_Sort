Heap sort is a comparison based sorting technique based on Binary Heap data structure. 
It is similar to selection sort where we first find the maximum element and place the 
maximum element at the end. We repeat the same process for remaining element.


Time complexity of heap sort: O(nlog(n))

Steps:
1. Build a max heap from the input data.
2. At this point, the largest item is stored at the root of the heap. Replace it with the last item of the heap 
   followed by reducing the size of heap by 1. Finally, heapify the root of tree.
3. Repeat above steps while size of heap is greater than 1.

Code :
#include <iostream>
#include <bits/stdc++.h>

using namespace std;

void swap(int *a,int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

void heapify(int arr[],int size,int index)
{
    int larg = index;
    int l = 2*index+1;
    int r = 2*index+2;
    
    if(l<size&&arr[larg]<arr[l])
    larg = l;
    
    if(r<size&&arr[larg]<arr[r])
    larg = r;
    
    if(larg!=index)
    {
        swap(&arr[larg],&arr[index]);
        heapify(arr,size,larg);
    }
}
void heapSort(int arr[],int size)
{
    for(int index = size/2-1;index>=0;index--)
    {
     heapify(arr,size,index);  
    }
    
    for(int i=size-1;i>0;i--)
    {
        swap(arr[0],arr[i]);
        heapify(arr,i,0);
        
    }
}

int main()
{
    int t; 
    cin>>t;
    while(t--)
    {
        int size;
        cin>>size;
        
        int arr[size];
        for(int i=0;i<size;i++)
        cin>>arr[i];
        
        heapSort(arr,size);
        
       for(int i=0;i<size;i++)
       cout<<arr[i]<<" ";
        cout<<endl;
    }
}
