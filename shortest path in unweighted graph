// similar to program : to find level of vetices in the graph

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

void AdjList(int e,vector<int> arr[])
{
    int x,y;
    for(int i=0;i<e;i++)
    {
        cin>>x;
        cin>>y;
        arr[x].push_back(y);
        arr[y].push_back(x);
    }
}

 int shortestPath(int s,int des,vector<int> arr[],int dist[],bool vis[])
 {
     queue<int> q;
     q.push(s);
     dist[s]=0;    
     vis[s]=true;
     
     while(!q.empty())
     {
         int temp = q.front();
         q.pop();
         
         for(int i=0;i<arr[temp].size();i++)
         {
             if(!vis[arr[temp][i]])
             {
                 vis[arr[temp][i]]=true;
                 dist[arr[temp][i]] = dist[temp]+1;   // increment distance from current vertex by 1
                 q.push(arr[temp][i]);
             }
             if(temp == des)
             return dist[des];
         }
     }
     return -1;
 }
int main() {
    
    int v;
    int e;
    cin>>v;
    cin>>e;
    
    int s,d;
    cin>>s>>d;
    
    vector<int> arr[v];
    int dis[v];    // array to keep distance of each vertex form source node
    bool vis[v];   // array to keep track of visited vertices
    
    for(int i=0;i<v;i++)
    vis[i] = false;
    
    AdjList(e,arr);
    
    cout<<shortestPath(s,d,arr,dis,vis);
    
	
}
