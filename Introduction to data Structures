Data Structure: refers to the storage of data in such a way that it can be used efficently.

Algorithms are compared with each other on the basis of their "Time complexity and Memory space Consumed"
There are different kind of Notation used to compare Algorithms.
Time complexties
1. Big O notation : upper Bound
2. Omega notation : lower bound
3. Theta notation : middle bound

Then there are some case 1. Worst case
                         2. Average case
                         3. Best Case
 #################################################################################################################################
 
ARRAY: array is collecetion of homogenous elements have same data type.
       We access arrays using index value => arr[0],arr[1],arr[2],arr[3]
       To understand in detail lets take arr[3], this implies = base address of array "arr"(i.e arr[0] or arr) + sizeof(int)*3
       So in the accessing any element of array using index, 2 operations are involved i.e. multiplication and summation.
       So time consumed to exectue arr is fixed as two operations are involved.
       
#####################################################################################################################################       
RECURSION : Function calling itself is called recursion. I terminates when base case is reached
           (NOTE: Recursion calls function again and again so consumes more memory, so its beneficial only when used for less time.)
          
       =>  The problems which can ebe solved using "Recursion" can also be solved using "Loops" but ever problem which can be solved
           using "loops" is not necessarily solved using "Recurssion"
           
          Example: 
          int main()
          {
          int k;
          k = fun(3);
          printf("%d",k);
          }
          
          int fun(int a)
          {
          if(a==1)    // base statement
          { return 1;}
          s = a+fun(a-1);  // "fun' function is called again => "Recursion".
          return s;
          }
          
BACKTRACKING : It just means trying all possibilities, as sometimes its the best algorithm for a problem.
               Backtracking is a method of exhausted search using divide and conquer.
            => This is always slow.
    *************************************************************************************************************************************           
      * Recursion Problem 1: TOWER OF HANOi
     **********************************************************************************************************************************  
     ** Even number of plates , so this algorith follwed
      => Total plates 4
      
       (Here 1,2,3  represents 1st box, 2nd box, 3rd box )
       Hint: odd plate(1st): 1st => 2 => 3 => 1 => 2 =>3 => 1 => 2 => 3 // 1st plate moves from box1 to box2, then box2 to box3, then box3 to box1, then box1 to box2 same order followed  
            even plate(2nd): 1 => 3 => 2 => 1 => 3                      // 2nd plate moves from box1 to box 3, then box2 to box1, then box1 to box3 same order followed 
            odd plate (3rd): 1 => 2 => 3                                // Same as first plate(odd plates) but less steps
            eve plate (4th): 1 => 3                                     // Same as 2nd plate(even plate)but less steps
            
            order of steps
            (Here 1,2,3,4 represents 1st plate, 2nd plate, 3rd plate, 4th plate)  
            1st plate => 2nd => 1st => 3rd => 1st => 2nd => 1st => 4th => 1st => 2nd => 1st => 3rd => 1st => 2nd => 1st
     (refer link : https://en.wikipedia.org/wiki/Tower_of_Hanoi)
 
 **  Even number of plates, so same algorith as 4 plates
    => Total plates 2
    
    Steps followed
    hint: odd plate(1st): 1 => 2 => 3     // 1st plate moves from box 1 to box 2 and then to box 3
         even plate(2nd): 1=> 3           // 2nd plate moves from box 1 to box 3 
        
          
    order of steps
         (Here 1,2 represents 1st plate, 2nd plate)
          1 => 2 => 1
         (explanation: 1st plate moves first, then 2nd plate moves , then 1st plate moves again)
  *************************************************************************************************************************************       
   ** Odd number of plates here the algorithm becomes opposite to Even number of plates
  
  => Total plates 3
   
   Steps followed
   hint: odd plate(1st): 1 => 3 => 2 => 1 => 3 // this step is followed by 2nd plate when total number of plates are even(e.g. 4 plates)
        even plate(2nd): 1 => 2 => 3           // this step is followed by 1st plate when total number of plates are even
         odd plate(3rd): 1 => 3
         
    order of steps (Note: order of steps are same for both even number of plates and odd number of plates)
    1 => 2 => 1 => 3 => 1 => 2 => 1 
 
 => Total plates
 
 steps followed
 hint: odd plate(1st): 1
 
 ***************************************************************************************************************************************
 Note: concluded by observing
    => 1st step alway by plate 1 from 1st box to 2nd box, 
       last step also always by plate 1 i.e from 2nd box to 3rd box. 
    => Total number of steps = 15 in case of 4 plates which may mean = ((2^4)-1) => ((2^n)-1), where n = number of plates
    => Number of steps followed by each plate depends on its position and total number of plates
            => 2^(n-p) // n = total number of plates, p = position of plate
         
  Example using total 4 plates
       1st plate total steps = 2^(4-1) = 8 steps  // n = 4, Position of plate = 1st
       2nd plate total steps = 2^(4-2) = 4 steps
       3rd plate total steps = 2^(4-3) = 2 steps
       4th plate total steps = 2^(4-4) = 1 steps
***************************************************************************************************************************************
Actual solution of Tower of Hanoi
***********************************
TOH:  Tower of Hanoi
   
   // Solution using recursion
   TOH(int n,char BEG,char AUX, char END)     // n = number of plates
   {
    if(n>=1)
    {
     TOH(n-1,BEG,AUX,END);
     printf("%c to %c",BEG,END);
     TOH(n-1,AUX,BEG,END);
    }
   } 
   int main()
{
	TOH(4,'A','B','C');
	return 0;
   } 
   
   Explanation
I:  For 1 plate
    => suppose we have only 1 plate, then solution is direct: Transfer plate 1 from Box A to Box C

II: For 2 plates
   => Now suppose when we have 2 plates, then solution will be as follows
       1. Firstly transfer (n-1) plates (i.e plate 1) from Beginning box  to auxillary box (i.e. from box A to box B).
       2. Then tranfer the n plate (i.e. plate 2) from Beginning box to destination box (i.e. from Box A to Box c) // use of explanation 1
       3. Then transfer the n-1 plate (i.e. plate 1) Auxillary box to destination box (i.e. from Box B to Box C). 
       
III: For 3 plates
  => Now suppose when we have 3 plates, then the solution will be as follows
       1. Firstly transfer (n-1) plate (i.e. plate 2) to auxillary box (i.e. from  Box A to Box B)
             => Now to do that we will have to use 3 step explanation of transfering 2 plates from Beginning to Destination as above
.......................................................................................................................................     
	      Here "Beginnig box -> A", "Auxillary Box -> C", "Destination Box -> B"  // => that's why -> TOH(n-1,BEG,DES,AUX);
.....................................................................................................................................	      
	       i)  Firstly transfer (n-1) plates (i.e plate 1) from Beginning box to auxillary box (i.e. from box A to box C).                                                
              ii) Then tranfer the n plate (i.e. plate 2) from Beginning box to destination box (i.e. from Box A to Box B)
             iii) Then transfer the n-1 plate (i.e. plate 1)  Auxillary box to destination box (i.e. from Box C to Box B). 
	      // By the end of this 2 plates get tranferred to B Box.
	      
      2. Then we tranfer the nth plate(i.e. 3rd plate) from to Destination Box (i.e from Box A to Box C)
      
      3. Now we have to tranfer the (n-1) plates (i.e plate 2 & plate 1) to destination box(i.e. Box B to Box C)  
            =>Now  Again we have to use the explanation of transferring the 2 plates 
......................................................................................................................................	    
	    Here "Beginning Box -> B", "Auxillary Box -> A", "Destination Box -> C" // => that's why -> TOH(n-1,AUX,BEG,DES);
......................................................................................................................................
             i) Firstly transfer (n-1) plates (i.e plate 1)from Beginning box to auxillary box (i.e. from box B to box A).                                                
            ii) Then tranfer the n plate (i.e. plate 2)from beginning box to destination box (i.e. from Box B to Box C)
           iii) Then transfer the n-1 plate (i.e. plate 1) Auxillary box to destination box (i.e. from Box A to Box B). 
	      // By the end of this 2 plates get tranferred to C Box.
	    
 ***************************************************************************************************************************************  
          Recursion Problem 2: Factorial
****************************************************************************************************************************************
Factorial = n*(n-1)*(n-2)*(n-3)*....1

int factorial(int n)
{
  int product;
  if(n==1)
  { return 1;}
  product = n*factorial(n-1)
  return product;
}
int main()
{
printf("%d ",factorial(3);
return 0;
}

Explanation
factorial of 3
=> product = 3*factorial(2); => 3*2 = 6 => return 6;
=> product = 2*factorial(1); => 2*1 = 2 => return 2;

********************************************************************************************************************************************
      Recursion Problem 3: Fibonacci
********************************************************************************************************************************************
  *Fibonacci series : 1,1,2,3,5,8,13,21,34,55,......
  *Fibonacci = (n-1)+(n-2) // sum of last 2 elements of series
  *Fibonacci(6), means return 6th element of fibonacci series i.e. 8
  
  int Fibonacci(int n)
  {
   if(n==1||n==2)
     {return 0;}
   int sum;
   sum = Fibonacci(n-1)+Fibonacci(n-2);
   return sum;
  }
  int main()
  {
   Fibonacci(4);
   return 0;
  }
  
  *Explanation
  Fibonacci(4) = Fibonacci(3)+Fibonacci(2);  => 2+1 = return 3;
                      +||
		 Fibonacci(2) +Fibonacci(1) = 1 + 1 = return 2;
  *****************************************************************************************************************************************
     Recursion Problem 4: Greatest common Divisor
 ******************************************************************************************************************************************
 
 #include <stdio.h>

int GCD(int a,int b)
{
	if(a==b)
	{return a;
	}
	
	if(a%b==0)
	{return b;
	}
	
	if(b%a==0)
	{return a;
	}
	
	if(a>b)
	{
		return GCD(a%b,b);
	}
	
	if(b>a)
    {
		return GCD(a,b%a);
	}
}

int main()
{
	printf("%d",GCD(21,14));
	return 0;
}

Explanation: 
   GCD(25,15) => GCD(25%15,15) 
=> GCD(10,15) => GCD(10,15%10)
=> GCD(10,5)  => GCD(10%5,5)
=> GCD(5,5), since a==b (i.e. 5==5)
so return 5, i.e 5 is the Greatest Common Divisor
*******************************************************************************************************************************************

  
   
   

 
    
    
