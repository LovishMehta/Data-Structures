In quick sort we take one element say beginnig element of array as pivot. 
Then we place that elemnet(pivot) in array where all the elments on its left are smaller than it and all elements on right are greater
than it.
Now after this we have two subarrays
1. index => beg to pivot-1
2. index => pivot+1 to end

Now in the simillar manner we take an elements as pivot and locate at is corret position in array. The process continues until the
array is not sorted

Time Complexity:
Best => O(nlog(n))
Average => O(nlog(n))
Worst => O(n^2)

**************************************************************************************************************************************
Quick sort with Recurssion
**************************************************************************************************************************************
#include<stdio.h>

void swap(int *a,int *b)
{
    *a = *a^*b;
    *b = *a^*b;
    *a = *a^*b;
}

int partition(int *arr,int beg,int end)
{
    printf("Entered partition function\n");
  while(1)
  {

    int pivot = beg;

    while(arr[pivot]<arr[end])
        end--;
    if(arr[pivot]==arr[end])
        return pivot;
    if(arr[pivot]>arr[end])
    {
         swap(arr+pivot,arr+end);
         pivot = end;
    }

    while(arr[pivot]>arr[beg])
        beg++;
    if(arr[pivot]==arr[beg])
        return pivot;
    if(arr[pivot]<arr[beg])
    {
        swap(arr+pivot,arr+beg);
        pivot = beg;
    }
  }
}

void quickSort(int *arr,int beg,int end)
{
 if(beg<end)
 {
 	int pivot = partition(arr,beg,end);
 	quickSort(arr,beg,pivot-1);
 	quickSort(arr,pivot+1,end);
 }

}

int main()
{
    int n,i;
    scanf("%d",&n);
    int arr[n];

    for(i=0;i<n;i++)
    scanf("%d",arr+i);

    printf("Entered Array is\n");
    for(i=0;i<n;i++)
        printf("%d ",arr[i]);
    printf("\n");

    quickSort(arr,0,n-1);

    printf("Sorted array is\n");
    for(i=0;i<n;i++)
     printf("%d ",arr[i]);
     
     return 0;
}

*************************************************************************************************************************************
Quick without Recurssion
*************************************************************************************************************************************
#include<stdio.h>

void swap(int *a,int *b)
{
    *a = *a^*b;
    *b = *a^*b;
    *a = *a^*b;
}

int partition(int *arr,int beg,int end)
{
    printf("Entered partition function\n");
  while(1)
  {

    int pivot = beg;

    while(arr[pivot]<arr[end])
        end--;
    if(arr[pivot]==arr[end])
        return pivot;
    if(arr[pivot]>arr[end])
    {
         swap(arr+pivot,arr+end);
         pivot = end;
    }

    while(arr[pivot]>arr[beg])
        beg++;
    if(arr[pivot]==arr[beg])
        return pivot;
    if(arr[pivot]<arr[beg])
    {
        swap(arr+pivot,arr+beg);
        pivot = beg;
    }
  }
}

void quickSort(int *arr,int n)
{
    int beg;
    int end;
    printf("Entered QuickSort\n");
    int upper[n];
    int lower[n];

    int pivot;
  

    int top = -1;
    top++;
    lower[top]= 0;
    upper[top]= n-1;
    while(top!=-1)
    {
        beg = lower[top];
        end = upper[top];
        top--;
        printf("%d %d\n",beg,end);
        pivot = partition(arr,beg,end);

       if(beg<pivot)
       {
        top++;
        lower[top] = beg;
        upper[top] = pivot-1;
   }

      if(pivot<end)
      {
        top++;
        lower[top] = pivot+1;
        upper[top] = end;
      }
    }

}

int main()
{
    int n,i;
    scanf("%d",&n);
    int arr[n];

    for(i=0;i<n;i++)
    scanf("%d",arr+i);

    printf("Entered Array is\n");
    for(i=0;i<n;i++)
        printf("%d ",arr[i]);
    printf("\n");

    quickSort(arr,n);

    printf("Sorted array is\n");
    for(i=0;i<n;i++)
     printf("%d ",arr[i]);
}
**************************************************************************************************************************************
